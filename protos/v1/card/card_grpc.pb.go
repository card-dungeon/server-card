// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: protos/v1/card/card.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CardClient is the client API for Card service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CardClient interface {
	GetCharacterCard(ctx context.Context, in *CardId, opts ...grpc.CallOption) (*CharacterCard, error)
	GetEquipCard(ctx context.Context, in *CardId, opts ...grpc.CallOption) (*EquipCard, error)
	GetSkillCard(ctx context.Context, in *CardId, opts ...grpc.CallOption) (*SkillCard, error)
	GetCharacterCardList(ctx context.Context, in *GetList, opts ...grpc.CallOption) (*CharacterCardList, error)
	GetEquipCardList(ctx context.Context, in *GetList, opts ...grpc.CallOption) (*EquipCardList, error)
	GetSkillCardList(ctx context.Context, in *GetList, opts ...grpc.CallOption) (*SkillCardList, error)
	GetCardList(ctx context.Context, in *GetList, opts ...grpc.CallOption) (*CardList, error)
}

type cardClient struct {
	cc grpc.ClientConnInterface
}

func NewCardClient(cc grpc.ClientConnInterface) CardClient {
	return &cardClient{cc}
}

func (c *cardClient) GetCharacterCard(ctx context.Context, in *CardId, opts ...grpc.CallOption) (*CharacterCard, error) {
	out := new(CharacterCard)
	err := c.cc.Invoke(ctx, "/card.Card/GetCharacterCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardClient) GetEquipCard(ctx context.Context, in *CardId, opts ...grpc.CallOption) (*EquipCard, error) {
	out := new(EquipCard)
	err := c.cc.Invoke(ctx, "/card.Card/GetEquipCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardClient) GetSkillCard(ctx context.Context, in *CardId, opts ...grpc.CallOption) (*SkillCard, error) {
	out := new(SkillCard)
	err := c.cc.Invoke(ctx, "/card.Card/GetSkillCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardClient) GetCharacterCardList(ctx context.Context, in *GetList, opts ...grpc.CallOption) (*CharacterCardList, error) {
	out := new(CharacterCardList)
	err := c.cc.Invoke(ctx, "/card.Card/GetCharacterCardList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardClient) GetEquipCardList(ctx context.Context, in *GetList, opts ...grpc.CallOption) (*EquipCardList, error) {
	out := new(EquipCardList)
	err := c.cc.Invoke(ctx, "/card.Card/GetEquipCardList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardClient) GetSkillCardList(ctx context.Context, in *GetList, opts ...grpc.CallOption) (*SkillCardList, error) {
	out := new(SkillCardList)
	err := c.cc.Invoke(ctx, "/card.Card/GetSkillCardList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardClient) GetCardList(ctx context.Context, in *GetList, opts ...grpc.CallOption) (*CardList, error) {
	out := new(CardList)
	err := c.cc.Invoke(ctx, "/card.Card/GetCardList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CardServer is the server API for Card service.
// All implementations must embed UnimplementedCardServer
// for forward compatibility
type CardServer interface {
	GetCharacterCard(context.Context, *CardId) (*CharacterCard, error)
	GetEquipCard(context.Context, *CardId) (*EquipCard, error)
	GetSkillCard(context.Context, *CardId) (*SkillCard, error)
	GetCharacterCardList(context.Context, *GetList) (*CharacterCardList, error)
	GetEquipCardList(context.Context, *GetList) (*EquipCardList, error)
	GetSkillCardList(context.Context, *GetList) (*SkillCardList, error)
	GetCardList(context.Context, *GetList) (*CardList, error)
	mustEmbedUnimplementedCardServer()
}

// UnimplementedCardServer must be embedded to have forward compatible implementations.
type UnimplementedCardServer struct {
}

func (UnimplementedCardServer) GetCharacterCard(context.Context, *CardId) (*CharacterCard, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCharacterCard not implemented")
}
func (UnimplementedCardServer) GetEquipCard(context.Context, *CardId) (*EquipCard, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEquipCard not implemented")
}
func (UnimplementedCardServer) GetSkillCard(context.Context, *CardId) (*SkillCard, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSkillCard not implemented")
}
func (UnimplementedCardServer) GetCharacterCardList(context.Context, *GetList) (*CharacterCardList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCharacterCardList not implemented")
}
func (UnimplementedCardServer) GetEquipCardList(context.Context, *GetList) (*EquipCardList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEquipCardList not implemented")
}
func (UnimplementedCardServer) GetSkillCardList(context.Context, *GetList) (*SkillCardList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSkillCardList not implemented")
}
func (UnimplementedCardServer) GetCardList(context.Context, *GetList) (*CardList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCardList not implemented")
}
func (UnimplementedCardServer) mustEmbedUnimplementedCardServer() {}

// UnsafeCardServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CardServer will
// result in compilation errors.
type UnsafeCardServer interface {
	mustEmbedUnimplementedCardServer()
}

func RegisterCardServer(s grpc.ServiceRegistrar, srv CardServer) {
	s.RegisterService(&Card_ServiceDesc, srv)
}

func _Card_GetCharacterCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServer).GetCharacterCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card.Card/GetCharacterCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServer).GetCharacterCard(ctx, req.(*CardId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Card_GetEquipCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServer).GetEquipCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card.Card/GetEquipCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServer).GetEquipCard(ctx, req.(*CardId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Card_GetSkillCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServer).GetSkillCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card.Card/GetSkillCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServer).GetSkillCard(ctx, req.(*CardId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Card_GetCharacterCardList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServer).GetCharacterCardList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card.Card/GetCharacterCardList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServer).GetCharacterCardList(ctx, req.(*GetList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Card_GetEquipCardList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServer).GetEquipCardList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card.Card/GetEquipCardList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServer).GetEquipCardList(ctx, req.(*GetList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Card_GetSkillCardList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServer).GetSkillCardList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card.Card/GetSkillCardList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServer).GetSkillCardList(ctx, req.(*GetList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Card_GetCardList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServer).GetCardList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card.Card/GetCardList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServer).GetCardList(ctx, req.(*GetList))
	}
	return interceptor(ctx, in, info, handler)
}

// Card_ServiceDesc is the grpc.ServiceDesc for Card service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Card_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "card.Card",
	HandlerType: (*CardServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCharacterCard",
			Handler:    _Card_GetCharacterCard_Handler,
		},
		{
			MethodName: "GetEquipCard",
			Handler:    _Card_GetEquipCard_Handler,
		},
		{
			MethodName: "GetSkillCard",
			Handler:    _Card_GetSkillCard_Handler,
		},
		{
			MethodName: "GetCharacterCardList",
			Handler:    _Card_GetCharacterCardList_Handler,
		},
		{
			MethodName: "GetEquipCardList",
			Handler:    _Card_GetEquipCardList_Handler,
		},
		{
			MethodName: "GetSkillCardList",
			Handler:    _Card_GetSkillCardList_Handler,
		},
		{
			MethodName: "GetCardList",
			Handler:    _Card_GetCardList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/v1/card/card.proto",
}
